<?xml version="1.0"?>
<!DOCTYPE sink [
<!ELEMENT sink (sample+)>
<!ELEMENT sample (path, flaw_type, comment, imports, codes, safe, input_type, exec_type, options?)>
<!ELEMENT path (dir+)>
<!ELEMENT dir (#PCDATA)>
<!ELEMENT flaw_type (#PCDATA)>
<!ATTLIST flaw_type flaw_group CDATA #REQUIRED>
<!ELEMENT comment (#PCDATA)>
<!ELEMENT imports (import*)>
<!ELEMENT import (#PCDATA)>
<!ELEMENT codes (code+)>
<!ELEMENT code (#PCDATA)>
<!ELEMENT safe (#PCDATA)>
<!ELEMENT input_type (#PCDATA)>
<!ELEMENT exec_type (#PCDATA)>
<!ELEMENT options EMPTY>
<!ATTLIST options need_complexity CDATA #IMPLIED>
]>
    <sink>
        <sample>
            <path>
                <dir>file_exists</dir>
            </path>
            <flaw_type flaw_group="IDOR">CWE_22</flaw_type>
            <comment>sink : check if a file exists</comment>
            <imports>
                <import>System.IO</import>
            </imports>
            <codes>
                <code>
                    File.Exists({{in_var_name}});
                </code>
            </codes>
            <safe>1</safe>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>ls</dir>
            </path>
            <flaw_type flaw_group="INJECTION">CWE_78</flaw_type>
            <comment>sink : run ls in a dir</comment>
            <imports>
                <import>System.IO</import>
            </imports>
            <codes>
                <code>
                    System.Diagnostics.Process.Start("/bin/bash", "-c 'ls " + {{in_var_name}} + "'");
                </code>
            </codes>
            <safe>1</safe>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>md5</dir>
            </path>
            <flaw_type flaw_group="SDE">CWE_327</flaw_type>
            <comment>sink : md5 function</comment>
            <imports>
                <import>System</import>
                <import>System.Security.Cryptography</import>
                <import>System.Text</import>
            </imports>
            <codes>
                <code>
                    using (MD5 md5Hash = MD5.Create())
                    {
                        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes({{in_var_name}}));

                        // Create a new Stringbuilder to collect the bytes
                        // and create a string.
                        StringBuilder sBuilder = new StringBuilder();

                        // Loop through each byte of the hashed data
                        // and format each one as a hexadecimal string.
                        for (int i = 0; i &lt; data.Length; i++)
                        {
                            sBuilder.Append(data[i].ToString("x2"));
                        }

                        string hash = sBuilder.ToString();
                    }
                </code>
            </codes>
            <safe>0</safe>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
            <options need_complexity="0"/>
        </sample>
        <sample>
            <path>
                <dir>SQL</dir>
                <dir>Injection</dir>
            </path>
            <flaw_type flaw_group="INJECTION">CWE_89</flaw_type>
            <comment>sink : SQL query</comment>
            <imports></imports>
            <codes>
                <code>string query = "SELECT * FROM Articles WHERE id="+{{in_var_name}}</code>
            </codes>
            <safe>0</safe>
            <input_type>string</input_type>
            <exec_type>SQL</exec_type>
        </sample>
        <sample>
            <path>
                <dir>SQL_prepared</dir>
            </path>
            <flaw_type flaw_group="INJECTION">CWE_89</flaw_type>
            <comment>sink : SQL query</comment>
            <imports></imports>
            <codes>
                <code>string query = "SELECT * FROM Articles WHERE id=@placeholder"</code>
                <code>string checked_data = {{in_var_name}}</code>
            </codes>
            <safe>0</safe>
            <input_type>string</input_type>
            <exec_type>SQL_prepared</exec_type>
        </sample>
        <sample>
            <path>
                <dir>LDAP</dir>
            </path>
            <flaw_type flaw_group="INJECTION">CWE_89</flaw_type>
            <comment>sink : LDAP Query</comment>
            <imports></imports>
            <codes>
                <code>string query = "(&amp;(objectClass=person)(sn=" + {{ in_var_name }} + "))";</code>
            </codes>
            <safe>0</safe>
            <input_type>string</input_type>
            <exec_type>LDAP</exec_type>
        </sample>
    </sink>
