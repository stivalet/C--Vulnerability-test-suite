<?xml version = "1.0"?>
<root>
    <conditions>
        <condition>
            <code>(1==1)</code>
            <value>True</value>
        </condition>

        <condition>
            <code>(1==0)</code>
            <value>False</value>
        </condition>
        <!-- TODO add other conditions-->
    </conditions>

    <complexities>
        <!-- Conditional branching -->
        <!-- if statements-->
        <complexity type="if" group="conditionals" executed="condition">
            <code>
                if({{ condition }}){
                    {{ placeholder }}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals" executed="condition">
            <code>
                if({{ condition }}){
                    {{ placeholder }}
                }else{
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals" executed="not_condition">
            <code>
                if({{ condition }}){
                    {}
                }else{
                    {{ placeholder }}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals" executed="condition">
            <code>
                if({{ condition }}){
                    {{ placeholder }}
                }else if(!{{ condition }}){
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals" executed="not_condition">
            <code>
                if({{ condition }}){
                    {}
                }else if(!{{ condition }}){
                    {{ placeholder }}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals" executed="condition">
            <code>
                if({{ condition }}){
                    {{ placeholder }}
                }else if(!{{ condition }}){
                    {}
                }else{
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals" executed="not_condition">
            <code>
                if({{ condition }}){
                    {}
                }else if(!{{ condition }}){
                    {{ placeholder }}
                }else{
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals" executed="0">
            <code>
                if({{ condition }}){
                    {}
                }else if(!{{ condition }}){
                    {}
                }else{
                    {{ placeholder }}
                }
            </code>
        </complexity>

        <!-- Switch cases  -->
        <complexity type="switch" group="conditionals" executed="1">
            <code>
                switch(6){
                    case(6):
                        {{ placeholder }}
                        break;
                    default:
                        break;
                }
            </code>
        </complexity>

        <complexity type="switch" group="conditionals" executed="0">
            <code>
                switch(6){
                    case(6):
                        break;
                    default:
                        {{ placeholder }}
                        break;
                }
            </code>
        </complexity>

        <!-- Ternary operators -->
        <complexity type="ternary" group="conditionals" executed="condition">
            <code>{{ condition }} ? {{ placeholder }} : {}</code>
        </complexity>

        <complexity type="ternary" group="conditionals" executed="not_condition">
            <code>{{ condition }} ? {} : {{ placeholder }}</code>
        </complexity>

        <!--Conditional and unconditional loops -->
        <complexity type="while" group="loops" executed="condition">
            <code>
                while({{ condition }}){
                    {{ placeholder }}
                    break;
                }
            </code>
        </complexity>

        <complexity type="while" group="loops" executed="1" need_condition="1">
            <code>
                do{
                    {{ placeholder }}
                    break;
                }while({{ condition }});
            </code>
        </complexity>

        <complexity type="for" group="loops" executed="1" need_id="1">
            <code>
                for(int i_{{id}} = 0; i_{{id}} &lt;= 1; i_{{id}}++){
                    {{ placeholder }}
                }
            </code>
        </complexity>

        <complexity type="foreach" group="loops" executed="1" need_id="1" in_out_var="in">
            <code>
                {{ var_type }}[] arr_{{ id }} = new {{ var_type }}[4]; // declaring array

                //Storing value in array element
                arr_{{ id }}[0] = null;
                arr_{{ id }}[1] = null;
                arr_{{ id }}[2] = null;
                arr_{{ id }}[3] = {{ in_var_name }};

                foreach(string val_{{ id }} in arr_{{ id }}){
                    if(val_{{ id }}!=null){
                        {{ out_var_name }} = val_{{ id }};
                        {{ placeholder }}
                    }
                }
            </code>
        </complexity>

        <!-- Unconditional jumps -->
        <complexity type="goto" group="jumps" executed="0" need_id="1">
            <code>
                goto Skip_{{id}};
                {{ placeholder }}
                Skip_{{id}}:
                {}
            </code>
        </complexity>

        <complexity type="goto" group="jumps" executed="1" need_id="1">
            <code>
                goto Skip_{{id}};
                Skip_{{id}}:
                {{ placeholder }}
            </code>
        </complexity>

        <!-- Functions -->
        <complexity type="function" group="functions" executed="1" in_out_var="traversal" indirection="1" need_id="1">
            <code>{{out_var_name}} = {{call_name}}({{in_var_name}});</code>
            <body>
                public static {{out_var_type}} {{call_name}}({{in_var_type}} param_{{id}} ){
                    {{local_var}}
                    {{in_var_name}} = param_{{id}};
                    {{ placeholder }}
                    return {{out_var_name}};
                }
            </body>
        </complexity>

        <!-- Classes -->
        <complexity type="class" group="classes" executed="1" in_out_var="traversal" need_id="1" indirection="1">
            <code>
                {{call_name}} var_{{id}} = new {{call_name}}({{in_var_name}});
                {{out_var_name}} = var_{{id}}.get_var_{{id}};
            </code>
            <body>
                class {{call_name}}{

                    {{in_var_type}} var_{{id}};

                    public {{call_name}}({{in_var_type}} {{in_var_name}}_{{id}}){
                        var_{{id}} = {{in_var_name}}_{{id}};
                    } //constructor

                    private {{out_var_type}} get_var_{{id}}(){
                        return var_{{id}};
                    }
                }
            </body>
        </complexity>
    </complexities>
</root>
