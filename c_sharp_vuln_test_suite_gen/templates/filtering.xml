<?xml version = "1.0"?>
<!DOCTYPE filtering [
<!ELEMENT filtering (sample+)>
<!ELEMENT sample (path, comment, flaws, imports, codes, input_type, output_type)>
<!ELEMENT path (dir+)>
<!ELEMENT dir (#PCDATA)>
<!ELEMENT comment (#PCDATA)>
<!ELEMENT flaws (flaw+)>
<!ELEMENT flaw EMPTY>
<!ATTLIST flaw flaw_type CDATA #REQUIRED>
<!ATTLIST flaw safe CDATA #REQUIRED>
<!ELEMENT imports (import*)>
<!ELEMENT import (#PCDATA)>
<!ELEMENT codes (code+)>
<!ELEMENT code (#PCDATA)>
<!ELEMENT input_type (#PCDATA)>
<!ELEMENT output_type (#PCDATA)>
]>
    <filtering>

        <sample>
            <path>
                <dir>no_filtering</dir>
            </path>
            <comment>no filtering</comment>
            <flaws>
                <flaw flaw_type="ALL" safe="0"/>
            </flaws>
            <imports></imports>
            <codes>
                <code>
                    //No filtering (sanitization)
                    var tainted = tainted_input
                </code>
            </codes>
            <input_type>nofilter</input_type>
            <output_type>nofilter</output_type>
        </sample>

        <sample>
            <path>
                <dir>func_preg_match</dir>
                <dir>only_numbers</dir>
            </path>
            <comment>filtering : check if there is only numbers</comment>
            <flaws>
                <flaw flaw_type="CWE_89" safe="1"/>
                <flaw flaw_type="CWE_91" safe="1"/>
                <flaw flaw_type="CWE_90" safe="1"/>
                <flaw flaw_type="CWE_95" safe="1"/>
                <flaw flaw_type="CWE_98" safe="1"/>
                <flaw flaw_type="CWE_601" safe="1"/>
            </flaws>
            <imports>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string tainted
                    string pattern = @"/^[0-9]*$/";
                    Regex r = new Regex(pattern);
                    Match m = r.Match(tainted_input);
                    if(!m.Success){
                        tainted = "";
                    }
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>cast</dir>
                <dir>string to integer</dir>
            </path>
            <comment>filtering : cast tainted into integer</comment>
            <flaws>
                <flaw flaw_type="CWE_89" safe="1"/>
            </flaws>
            <imports>
                <import>System</import>
            </imports>
            <codes>
                <code>
                    int tainted = Convert.ToInt32(tainted_input);
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>int</output_type>
        </sample>

        <sample>
            <path>
                <dir>invalid_filenames_chars_path</dir>
            </path>
            <comment>filtering : remove all invalid filenames and chars in paths</comment>
            <flaws>
                <flaw flaw_type="CWE_22" safe="1"/>
            </flaws>
            <imports>
                <import>System.IO</import>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string regexSearch = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());
                    Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                    string tainted = r.Replace(tainted_input, "");
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>invalid_filenames_chars_semi-colon_path</dir>
            </path>
            <comment>filtering : remove semi-colon and all invalid filenames and chars in paths</comment>
            <flaws>
                <flaw flaw_type="CWE_78" safe="1"/>
            </flaws>
            <imports>
                <import>System.IO</import>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string regexSearch = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars()) + ";";
                    Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                    string tainted = r.Replace(tainted_input, "");
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>invalid_filenames_path</dir>
            </path>
            <comment>filtering : remove all invalid filenames in a path</comment>
            <flaws>
                <flaw flaw_type="CWE_22" safe="0"/>
            </flaws>
            <imports>
                <import>System.IO</import>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string regexSearch = new string(Path.GetInvalidFileNameChars());
                    Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                    string tainted = r.Replace(tainted_input, "");
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>invalid_chars_path</dir>
            </path>
            <comment>filtering : remove all invalid chars in a path</comment>
            <flaws>
                <flaw flaw_type="CWE_22" safe="0"/>
            </flaws>
            <imports>
                <import>System.IO</import>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string regexSearch = new string(Path.GetInvalidPathChars());
                    Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                    string tainted = r.Replace(tainted_input, "");
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>regex_parent_dir_path</dir>
            </path>
            <comment>filtering : remove first "../" in path</comment>
            <flaws>
                <flaw flaw_type="CWE_22" safe="0"/>
            </flaws>
            <imports>
                <import>using System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string pattern = "^\\.\\.\\/";
                    Regex r = new Regex(pattern);
                    string tainted_out = r.Replace(tainted_input, "");
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>good_regex_parent_dir_path</dir>
            </path>
            <comment>filtering : remove all "../" in path</comment>
            <flaws>
                <flaw flaw_type="CWE_22" safe="1"/>
            </flaws>
            <imports>
                <import>using System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string pattern = "^[]\\.\\.\\/]+";
                    Regex r = new Regex(pattern);
                    string tainted = r.Replace(tainted_input, "");
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

    </filtering>
