<?xml version = "1.0"?>
<!DOCTYPE filtering [
<!ELEMENT filtering (sample+)>
<!ELEMENT sample (flaws, imports, path, comment, codes, input_type, output_type)>
<!ELEMENT path (dir+)>
<!ELEMENT dir (#PCDATA)>
<!ELEMENT comment (#PCDATA)>
<!ELEMENT flaws (flaw+)>
<!ELEMENT flaw EMPTY>
<!ATTLIST flaw flaw_type CDATA #REQUIRED>
<!ATTLIST flaw safe CDATA #REQUIRED>
<!ELEMENT imports (import*)>
<!ELEMENT import (#PCDATA)>
<!ELEMENT codes (code+)>
<!ELEMENT code (#PCDATA)>
<!ELEMENT input_type (#PCDATA)>
<!ELEMENT output_type (#PCDATA)>
]>

<filtering>


  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_preg_match</dir>
      <dir>only_letters</dir>
    </path>
    <comment>sanitize : check if there is only letters</comment>
    <codes>
      <code>
        $re = "/^[a-zA-Z]*$/";
        if(preg_match($re, {{in_var_name}}) == 1){
          {{out_var_name}} = {{in_var_name}};
        }
        else{
          {{out_var_name}} = "";
        }
        </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_preg_match</dir>
      <dir>only_numbers</dir>
    </path>
    <comment>sanitize : check if there is only numbers</comment>
    <codes>
      <code>$re = "/^[0-9]*$/";
        if(preg_match($re, {{in_var_name}}) == 1){
          {{out_var_name}} = {{in_var_name}};
        }
        else{
          {{out_var_name}} = "";
        }</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>


  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_preg_match</dir>
      <dir>letters_numbers</dir>
    </path>
    <comment>sanitize : check if there is only letters and/or numbers</comment>
    <codes>
      <code>$re = "/^[a-zA-Z0-9]*$/";
        if(preg_match($re, {{in_var_name}}) == 1){
          {{out_var_name}} = {{in_var_name}};
        }
        else{
          {{out_var_name}} = "";
        }</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
      <flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_preg_match</dir>
      <dir>no_filtering</dir>
    </path>
    <comment>sanitize : regular expression accepts everything</comment>
    <codes>
      <code>$re = "/^.*$/";
        if(preg_match($re, {{in_var_name}}) == 1){
          {{out_var_name}} = {{in_var_name}};
        }
        else{
          {{out_var_name}} = "";
        }</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>email_filter</dir>
    </path>
    <comment>Uses an email_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var({{in_var_name}}, FILTER_SANITIZE_EMAIL);
        if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
          {{out_var_name}} = $sanitized ;
        else
          {{out_var_name}} = "" ;</code>
        </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>full_special_chars_filter</dir>
    </path>
    <comment>Uses a full_special_chars_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var({{in_var_name}}, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
          {{out_var_name}} = $sanitized ;
     </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>magic_quotes_filter</dir>
    </path>
    <comment>Uses a magic_quotes_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var({{in_var_name}}, FILTER_SANITIZE_MAGIC_QUOTES);
          {{out_var_name}} = $sanitized ;
      </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>number_float_filter</dir>
    </path>
    <comment>Uses a number_float_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var({{in_var_name}}, FILTER_SANITIZE_NUMBER_FLOAT);
    if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
      {{out_var_name}} = $sanitized ;
    else
      {{out_var_name}} = "" ;
    </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>number_int_filter</dir>
    </path>
    <comment>Uses a number_int_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var({{in_var_name}}, FILTER_SANITIZE_NUMBER_INT);
    if (filter_var($sanitized, FILTER_VALIDATE_INT))
      {{out_var_name}} = $sanitized ;
    else
      {{out_var_name}} = "" ;
    </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>special_chars_filter</dir>
    </path>
    <comment>Uses a special_chars_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var({{in_var_name}}, FILTER_SANITIZE_SPECIAL_CHARS);
          {{out_var_name}} = $sanitized ;
      </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>email_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter email_filter is not applied</comment>
    <codes>
      <code>if (filter_var({{in_var_name}}, FILTER_VALIDATE_EMAIL))
      {{out_var_name}} = {{in_var_name}} ;
    else
      {{out_var_name}} = "" ;</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>

      <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>number_float_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter number_float_filter is not applied</comment>
    <codes>
      <code>if (filter_var({{in_var_name}}, FILTER_VALIDATE_FLOAT))
      {{out_var_name}} = {{in_var_name}} ;
    else
      {{out_var_name}} = "" ;
    </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
      <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>number_int_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter number_int_filter is not applied</comment>
    <codes>
      <code>if (filter_var({{in_var_name}}, FILTER_VALIDATE_INT))
      {{out_var_name}} = {{in_var_name}} ;
    else
      {{out_var_name}} = "" ;</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>

        <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>CAST</dir>
      <dir>cast_float</dir>
    </path>
    <comment>sanitize : cast in float</comment>
    <codes>
      <code>{{out_var_name}} = (float) {{in_var_name}} ;</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
      <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>CAST</dir>
      <dir>cast_float_sort_of</dir>
    </path>
    <comment>sanitize : cast via + = 0.0</comment>
    <codes>
      <code>
          {{in_var_name}} += 0.0 ;
          {{out_var_name}} = {{in_var_name}};
      </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>CAST</dir>
      <dir>cast_int</dir>
    </path>
    <comment>sanitize : cast into int</comment>
    <codes>
      <code>{{out_var_name}} = (int) {{in_var_name}} ;</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>CAST</dir>
      <dir>cast_int_sort_of</dir>
    </path>
    <comment>sanitize : cast via + = 0</comment>
    <codes>
      <code>
          {{in_var_name}} += 0 ;
          {{out_var_name}} = {{in_var_name}};
      </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>CAST</dir>
      <dir>cast_int_sort_of2</dir>
    </path>
    <comment>sanitize : cast via + = 0</comment>
    <codes>
      <code>{{out_var_name}} = {{in_var_name}} + 0;</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>CAST</dir>
      <dir>func_settype_float</dir>
    </path>
    <comment>sanitize : settype (float)</comment>
    <codes>
      <code>if(settype({{in_var_name}}, "float"))
  {{out_var_name}} = {{in_var_name}} ;
else
  {{out_var_name}} = 0.0 ;</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>CAST</dir>
      <dir>func_settype_int</dir>
    </path>
    <comment>sanitize : use of settype_int</comment>
    <codes>
      <code>if (settype({{in_var_name}}, "integer"))
      {{out_var_name}} = {{in_var_name}} ;
    else
      {{out_var_name}} = 0 ;
    </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
<flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_addslashes</dir>
    </path>
    <comment>sanitize : use of the function addslashes</comment>
    <codes>
      <code>{{out_var_name}} = addslashes({{in_var_name}});</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>no_sanitizing</dir>
    </path>
    <comment>sanitize : none</comment>
    <codes>
      <code>//no_sanitizing
          {{out_var_name}} = {{in_var_name}};
      </code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_floatval</dir>
    </path>
    <comment>sanitize : use of floatval</comment>
    <codes>
      <code>{{out_var_name}} = floatval({{in_var_name}});</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_htmlentities</dir>
    </path>
    <comment>sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results</comment>
    <codes>
      <code>{{out_var_name}} = htmlentities({{in_var_name}}, ENT_QUOTES);</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_htmlspecialchars</dir>
    </path>
    <comment>sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results</comment>
    <codes>
      <code>{{out_var_name}} = htmlspecialchars({{in_var_name}}, ENT_QUOTES);</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_intval</dir>
    </path>
    <comment>sanitize : use of intval</comment>
    <codes>
      <code>{{out_var_name}} = intval({{in_var_name}});</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_mysql_real_escape_string</dir>
    </path>
    <comment>SANITIZE : use of mysql_real_escape string</comment>
    <codes>
      <code>{{out_var_name}} = mysql_real_escape_string({{in_var_name}});</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="0"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_preg_replace</dir>
    </path>
    <comment>SANITIZE : use of preg_replace</comment>
    <codes>
      <code>{{out_var_name}} = preg_replace('/\'/', '', {{in_var_name}});</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>func_preg_replace2</dir>
    </path>
    <comment>SANITIZE : use of preg_replace with another regex</comment>
    <codes>
      <code>{{out_var_name}} = preg_replace('/\W/si','',{{in_var_name}});</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>ternary_white_list_order_direction</dir>
    </path>
    <comment>sanitize : use of ternary condition</comment>
    <codes>
      <code>{{out_var_name}} = {{in_var_name}}  == 'DESC' ? 'DESC' : 'ASC';</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>

    <sample>
    <flaws>
  <flaw flaw_type="CWE_89" safe="1"/>
    </flaws>
  <imports></imports>
    <path>
      <dir>ternary_white_list</dir>
    </path>
    <comment>sanitize : use of ternary condition</comment>
    <codes>
      <code>{{out_var_name}} = {{in_var_name}}  == 'safe1' ? 'safe1' : 'safe2';</code>
    </codes>
  <input_type>string</input_type>
  <output_type>string</output_type>
  </sample>


</filtering>
