<?xml version="1.0"?>
<!DOCTYPE input [
<!ELEMENT input (sample+)>
<!ELEMENT sample (path, comment, flaws, imports, code, input_type, output_type)>
<!ELEMENT path (dir+)>
<!ELEMENT dir (#PCDATA)>
<!ELEMENT comment (#PCDATA)>
<!ELEMENT flaws (flaw+)>
<!ELEMENT flaw EMPTY>
<!ATTLIST flaw flaw_type CDATA #REQUIRED>
<!ATTLIST flaw safe CDATA #REQUIRED>
<!ELEMENT imports (import*)>
<!ELEMENT import (#PCDATA)>
<!ELEMENT code (#PCDATA)>
<!ELEMENT input_type (#PCDATA)>
<!ELEMENT output_type (#PCDATA)>
]>
<input>
  <sample>
    <path>
      <dir>backticks</dir>
    </path>
    <comment>input : backticks interpretation, reading the file /tmp/tainted.txt</comment>
    <flaws>
        <flaw flaw_type="default" safe="0"/>
    </flaws>
    <imports>
    </imports>
    <code>{{out_var_name}} = `cat /tmp/tainted.txt`;</code>
    <input_type>file : /tmp/tainted.txt</input_type>
    <output_type>string</output_type>
  </sample>


  <sample>
    <path>
      <dir>exec</dir>
    </path>
    <comment>input : use exec to execute the script /tmp/tainted.php and store the output in $tainted</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>
        $script = "/tmp/tainted.php";
        exec($script, $result, $return);
        {{out_var_name}} = $result[0];</code>
    <input_type>script : /tmp/tainted.php</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>fopen</dir>
    </path>
    <comment>input : use fopen to read /tmp/tainted.txt and put the first line in $tainted</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>$handle = @fopen("/tmp/tainted.txt", "r");

if ($handle) {
  if(({{out_var_name}} = fgets($handle, 4096)) == false) {
    {{out_var_name}} = "";
  }
  fclose($handle);
} else {
  {{out_var_name}} = "";
}</code>
    <input_type>file : /tmp/tainted.txt</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>GET</dir>
    </path>
    <comment>input : reads the field UserData from the variable $_GET</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>{{out_var_name}} = $_GET['UserData'];</code>
    <input_type>variable : $_GET['UserData']</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>popen</dir>
    </path>
    <comment>input : Uses popen to read the file /tmp/tainted.txt using cat command</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
{{out_var_name}} = fread($handle, 4096);
pclose($handle);</code>
    <input_type>file : /tmp/tainted.txt</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>POST</dir>
    </path>
    <comment>input : get the field UserData from the variable $_POST</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>{{out_var_name}} = $_POST['UserData'];</code>
    <input_type>variable : $_POST['UserData']</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>proc_open</dir>
    </path>
    <comment>input : use proc_open to read /tmp/tainted.txt</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>$descriptorspec = array(
  0 => array("pipe", "r"),
  1 => array("pipe", "w"),
  2 => array("file", "/tmp/error-output.txt", "a")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  {{out_var_name}} = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</code>
    <input_type>file : /tmp/tainted.txt</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>SESSION</dir>
    </path>
    <comment>input : get the UserData field of $_SESSION</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>{{out_var_name}} = $_SESSION['UserData'];</code>
    <input_type>variable : $_SESSION['UserData']</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>shell_exec</dir>
    </path>
    <comment>input : use shell_exec to cat /tmp/tainted.txt</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>{{out_var_name}} = shell_exec('cat /tmp/tainted.txt');</code>
    <input_type>file : /tmp/tainted.txt</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>system</dir>
    </path>
    <comment>input : execute a ls command using the function system, and put the last result in $tainted</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>{{out_var_name}} = system('ls', $retval);</code>
    <input_type>variable : $retval</input_type>
  <output_type>string</output_type>
  </sample>

  <sample>
    <path>
      <dir>unserialize</dir>
    </path>
    <comment>input : Get a serialize string in POST and unserialize it</comment>
  <flaws>
      <flaw flaw_type="default" safe="0"/>
  </flaws>
  <imports>
  </imports>
    <code>$string = $_POST['UserData'] ;
        {{out_var_name}} = unserialize($string);
    </code>
    <input_type>serialized : string in POST['UserData']</input_type>
  <output_type>string</output_type>
  </sample>



</input>
