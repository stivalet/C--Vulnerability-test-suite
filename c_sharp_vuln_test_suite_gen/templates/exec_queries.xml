<?xml version = "1.0"?>
<!DOCTYPE exec_queries [
<!ELEMENT exec_queries (exec_query*)>
<!ELEMENT exec_query (path, comment, imports, code)>
<!ATTLIST exec_query type CDATA #REQUIRED>
<!ATTLIST exec_query safe CDATA #REQUIRED>
<!ELEMENT path (dir+)>
<!ELEMENT dir (#PCDATA)>
<!ELEMENT comment (#PCDATA)>
<!ELEMENT imports (import*)>
<!ELEMENT import (#PCDATA)>
<!ELEMENT code (#PCDATA)>
]>

<exec_queries>
    <exec_query type="eval" safe="0">
        <path>
            <dir>eval</dir>
        </path>
        <comment></comment>
        <imports></imports>
        <code>
        </code>
    </exec_query>
    <exec_query type="OS_command" safe="0">
        <path>
            <dir>os_command</dir>
        </path>
        <comment></comment>
        <imports></imports>
        <code>
            try{
                // create the ProcessStartInfo using "cmd" as the program to be run,
                System.Diagnostics.ProcessStartInfo procStartInfo = new System.Diagnostics.ProcessStartInfo("cmd", "/c " + query);

                // The following commands are needed to redirect the standard output.
                procStartInfo.RedirectStandardOutput = true;
                procStartInfo.UseShellExecute = false;

                // Do not create the black window.
                procStartInfo.CreateNoWindow = true;
                // Create a process, assign its ProcessStartInfo and start it
                System.Diagnostics.Process proc = new System.Diagnostics.Process();
                proc.StartInfo = procStartInfo;
                proc.Start();

                // Get the output into a string
                string result = proc.StandardOutput.ReadToEnd();

                // Display the command output.
                Console.WriteLine(result);
            }catch (Exception objException){
                //log Exception
                Console.WriteLine(objException);
            }
        </code>
    </exec_query>
    <exec_query type="LDAP" safe="0">
        <path>
            <dir>ldap</dir>
        </path>
        <comment>LDAP Query</comment>
        <imports>
            <import>System.DirectoryServices</import>
        </imports>
        <code>
            using (System.DirectoryServices.DirectoryEntry CN_Main = new System.DirectoryServices.DirectoryEntry(strConnect))
            {
                string strResult = "";
                System.DirectoryServices.DirectorySearcher DirSearcher = new System.DirectoryServices.DirectorySearcher(CN_Main, query);
                System.DirectoryServices.DirectoryEntry CN_Result;
                CN_Main.AuthenticationType = AuthenticationTypes.None;
                foreach (System.DirectoryServices.SearchResult ResultSearch in DirSearcher.FindAll()){
                    if (ResultSearch != null){
                        CN_Result = ResultSearch.GetDirectoryEntry();
                        if ((string)CN_Result.Properties["userclass"][0] == "noname")
                        {
                            strResult = strResult + "Name : " + CN_Result.InvokeGet("sn");
                        }
                    }
                }
                Console.WriteLine(strResult);
            }
        </code>
    </exec_query>
    <exec_query type="SQL"  safe="0">
        <path>
            <dir>mysql</dir>
        </path>
        <comment></comment>
        <imports>
            <import>MySql.Data.MySqlClient</import>
        </imports>
        <code>
            string connectionString = @"server=localhost;uid=mysql_user;password=mysql_password;database=dbname";
            MySqlConnection dbConnection = null

            try {
                dbConnection = new MySqlConnection(connectionString);
                dbConnection.open();
                MySqlCommand cmd = dbConnection.CreateCommand();
                cmd.CommandText = query;

                MySqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    Console.WriteLine(reader.ToString());
                }

                dbConnection.close();

            } catch (Exception e) {
                Console.WriteLine(e.ToString());
            }

        </code>
    </exec_query>
    <exec_query type="SQL"  safe="0">
        <path>
            <dir>sql_server</dir>
        </path>
        <comment></comment>
        <imports>
            <import>System.Data.SqlClient</import>
        </imports>
        <code>
            string connectionString =  @"server=localhost;uid=sql_user;password=sql_password;database=dbname";
            SqlConnection dbConnection = null;

            try {
                dbConnection = new SqlConnection(connectionString);
                dbConnection.open();
                SqlCommand cmd = dbConnection.CreateCommand();
                cmd.CommandText = query;

                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read()){
                    Console.WriteLine(reader.ToString());
                }

                dbConnection.close();
            } catch (Exception e) {
                Console.WriteLine(e.ToString());
            }
        </code>
    </exec_query>
    <exec_query type="SQL" safe="0">
        <path>
            <dir>postgre_sql</dir>
        </path>
        <comment></comment>
        <imports>
            <import>Npgsql</import>
        </imports>
        <code>
            string connectionString = "Server=localhost;port=1337;User Id=postgre_user;Password=postgre_password;Database=dbname";
            NpgsqlConnection dbConnection = null
            DataSet ds = new DataSet();

            try{
                dbConnection = new NpgsqlConnection(connectionString);
                dbConnection.Open();

                NpgsqlDataAdapter da = new NpgsqlDataAdapter(sql, dbConnection);
                da.Fill(ds);
                ds.ToList().ForEach(delegate(string result){Console.WriteLine(result)});
                dbConnection.Close();
            }catch (Exception e){
                Console.WriteLine(e.ToString());
            }
        </code>
    </exec_query>
    <exec_query type="SQL" safe="0">
        <path>
            <dir>sqlite</dir>
        </path>
        <comment></comment>
        <imports>
            <import>System.Data.SQLite</import>
        </imports>
        <code>
            SQLiteConnection dbConnection = null
            try{
                dbConnection = new SQLiteConnection("data source=C:\\data");
                SQLiteCommand command = new SQLiteCommand(query, dbConnection);

                SQLiteDataReader reader = command.ExecuteReader();

                while (reader.Read()){
                    Console.WriteLine(reader.ToString());
                }

                dbConnection.Close();
            }catch(Exception e){
                Console.WriteLine(e.ToString());
            }
        </code>
    </exec_query>
    <exec_query type="SQL" safe="0">
        <path>
            <dir>oracle_sql</dir>
        </path>
        <comment></comment>
        <imports>
            <import>System.Data.OracleClient</import>
        </imports>
        <code>
            string connectionString = "Data Source=localhost;User ID=oracle_user;Password=oracle_password";
            OracleConnection dbConnection = null;

            try{
                dbConnection = new OracleConnection(connectionString);
                dbConnection.Open();

                OracleCommand cmd = dbConnection.CreateCommand();
                cmd.CommandText = query;

                OracleDataReader reader = command.ExecuteReader();

                while (reader.Read()){
                    Console.WriteLine(reader.ToString());
                }

                dbConnection.Close();

            }catch(Exception e){
                Console.WriteLine(e.ToString());
            }
        </code>
    </exec_query>
    <exec_query type="SQL_prepared" safe="1">
        <path>
            <dir>mysql_prepared</dir>
        </path>
        <comment></comment>
        <imports>
            <import>MySql.Data.MySqlClient</import>
        </imports>
        <code>
            string connectionString = @"server=localhost;uid=mysql_user;password=mysql_password;database=dbname";
            MySqlConnection dbConnection = null

            try {
                dbConnection = new MySqlConnection(connectionString);
                dbConnection.open();
                MySqlCommand cmd = dbConnection.CreateCommand();
                cmd = new MySqlCommand(query);
                cmd.Parameters.AddWithValue("@placeholder",checked_data);
                cmd.prepare();

                MySqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    Console.WriteLine(reader.ToString());
                }

                dbConnection.close();

            } catch (Exception e) {
                Console.WriteLine(e.ToString());
            }
        </code>
    </exec_query>
    <exec_query type="XPATH" safe="0">
        <path>
            <dir>xpath</dir>
        </path>
        <comment>exec_query : xpath</comment>
        <imports>
            <import>System.Xml</import>
            <import>System.Xml.XPath</import>
        </imports>
        <code>
            string filename = "file.xml";
            XmlDocument document = new XmlDocument( );
            document.Load(filename);
            XmlTextWriter writer = new XmlTextWriter(Console.Out);
            writer.Formatting = Formatting.Indented;

            XmlNode node = document.SelectSingleNode(query);
            node.WriteTo(writer);

            writer.Close( );
        </code>
    </exec_query>
    <exec_query type="XPATH_prepared" safe="1">
        <path>
            <dir>xpath_prepared</dir>
        </path>
        <comment>exec_query : xpath prepared statement</comment>
        <imports>
            <import>System.Xml</import>
            <import>System.Xml.XPath</import>
        </imports>
        <code>
            string filename = "file.xml";
            XmlDocument document = new XmlDocument( );
            document.Load(filename);
            XmlTextWriter writer = new XmlTextWriter(Console.Out);
            writer.Formatting = Formatting.Indented;

            XmlNode node = document.SelectSingleNode(string.Format(query),checked_data);
            node.WriteTo(writer);

            writer.Close( );
        </code>
    </exec_query>

</exec_queries>
