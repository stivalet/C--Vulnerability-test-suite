"""
FileTemplate Class (TODO DOC)
"""

from jinja2 import Template, DebugUndefined
import c_sharp_vuln_test_suite_gen.generator


class FileTemplate(object):

    def __init__(self, file_template):
        self._language_name = file_template.get("name")
        """ Name of language """
        self._file_extension = file_template.find("file_extension").text
        """ File extention """
        self._namespace = ""
        if file_template.find("namespace") is not None:
            self._namespace = file_template.find("namespace").text
        """ Namespace """
        self._code = file_template.find("code").text
        self._code = c_sharp_vuln_test_suite_gen.generator.Generator.remove_indent(self._code)
        """ Template code """
        self._imports = [imp.text for imp in file_template.find("imports").findall("import")]
        """ imports for template """
        self._comment = {}
        """ Structure for comment (inline, multiline)"""
        self._comment['open'] = file_template.find("comment").find("open").text
        self._comment['close'] = file_template.find("comment").find("close").text
        self._comment['inline'] = file_template.find("comment").find("inline").text
        self._prefix = file_template.find("variables").get("prefix")
        """ Variables prefix """
        self._import_code = file_template.find("variables").get("import_code")
        """ Import code with placeholder"""
        self._variables = {}
        """ Identifier and initializer for variables """
        for v in file_template.find("variables"):
            self._variables[v.get("type")] = {"code": v.get("code"), "init": v.get("init")}

    @property
    def language_name(self):
        return self._language_name

    @property
    def namespace(self):
        return self._namespace

    @property
    def imports(self):
        return self._imports

    def generate_imports(self, imports):
        res = ""
        for i in imports:
            imp = Template(self._import_code).render(import_file=i)
            res += imp + "\n"
        return res

    @property
    def prefix(self):
        return self._prefix

    def get_type_var_code(self, type_v):
        """ Return the statement code of specified variable """
        if type_v in self._variables:
            return self._variables[type_v]["code"]
        else:
            return ""

    def get_init_var_code(self, type_v):
        """ Return the init code of specified variable """
        if type_v in self._variables:
            return self._variables[type_v]["init"]
        else:
            return ""

    @property
    def code(self):
        return self._code

    @property
    def file_extension(self):
        return self._file_extension

    @property
    def comment(self):
        return self._comment
