<?xml version = "1.0"?>
<exec_queries>
    <exec_query type="eval">
        <code>
        </code>
    </exec_query>
    <exec_query type="LDAP">
        <code>
        </code>
    </exec_query>
    <exec_query type="OS_command">
        <code>
            try{
                // create the ProcessStartInfo using "cmd" as the program to be run,
                System.Diagnostics.ProcessStartInfo procStartInfo = new System.Diagnostics.ProcessStartInfo("cmd", "/c " + tainted);

                // The following commands are needed to redirect the standard output.
                procStartInfo.RedirectStandardOutput = true;
                procStartInfo.UseShellExecute = false;

                // Do not create the black window.
                procStartInfo.CreateNoWindow = true;
                // Create a process, assign its ProcessStartInfo and start it
                System.Diagnostics.Process proc = new System.Diagnostics.Process();
                proc.StartInfo = procStartInfo;
                proc.Start();

                // Get the output into a string
                string result = proc.StandardOutput.ReadToEnd();

                // Display the command output.
                Console.WriteLine(result);
            }catch (Exception objException){
                //log Exception
                Console.WriteLine(objException);
            }
        </code>
    </exec_query>
    <exec_query type="MySQL">
        <imports>
            <import>MySql.Data.MySqlClient</import>
        </imports>
        <code>
            string connectionString = @"server=localhost;uid=mysql_user;password=mysql_password;database=dbname";
            MySqlConnection dbConnection = null

            try {
                dbConnection = new MySqlConnection(connectionString);
                dbConnection.open();
                MySqlCommand cmd = dbConnection.CreateCommand();
                cmd.CommandText = tainted;
            } catch (Exception e) {
                Console.WriteLine(e.ToString());
            }

            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                Console.WriteLine(reader.ToString());
            }

            dbConnection.close();
        </code>
    </exec_query>
    <exec_query type="SQL_Server">
        <imports>
            <import>Sql.Data.SqlClient</import>
        </imports>
        <code>
            string connectionString =  @"server=localhost;uid=sql_user;password=sql_password;database=dbname";
            SqlConnection dbConnection = null;

            try {
                dbConnection = new SqlConnection(connectionString);
                dbConnection.open();
                SqlCommand cmd = dbConnection.CreateCommand();
                cmd.CommandText = tainted;
            } catch (Exception e) {
                Console.WriteLine(e.ToString());
            }

            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                Console.WriteLine(reader.ToString());
            }

            try{
                dbConnection.close();
            }catch(Exception e){
                Console.WriteLine(e.ToString());
            }
        </code>
    </exec_query>
    <exec_query type="Postgre_SQL">
        <imports>
            <import>Npgsql</import>
        </imports>
        <code>
            string connectionString = "Server=localhost;port=1337;User Id=postgre_user;Password=postgre_password;Database=dbname";
            NpgsqlConnection dbConnection = null
            DataSet ds = new DataSet();

            try{
                dbConnection = new NpgsqlConnection(connectionString);
                dbConnection.Open();

                NpgsqlDataAdapter da = new NpgsqlDataAdapter(sql, dbConnection);
                da.Fill(ds);
                ds.ToList().ForEach(delegate(string result){Console.WriteLine(result)});
                dbConnection.Close();
            }catch (Exception e){
                Console.WriteLine(e.ToString());
            }
        </code>
    </exec_query>
    <exec_query type="SQL_prepared">
        <code>
        </code>
    </exec_query>
    <exec_query type="XPATH">
        <code>
        </code>
    </exec_query>
</exec_queries>
