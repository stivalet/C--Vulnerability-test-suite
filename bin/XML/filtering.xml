<?xml version = "1.0"?>

    <sanitize>
        <sample>
            <flaws>
                <flaw>CWE_89_Injection</flaw>
                <flaw>CWE_91_Injection</flaw>
                <flaw>CWE_90_Injection</flaw>
                <flaw>CWE_78_Injection</flaw>
                <flaw>CWE_95_Injection</flaw>
                <flaw>CWE_98_Injection</flaw>
                <flaw>CWE_601_URF</flaw>
            </flaws>
            <path>
                <dir>func_preg_match</dir>
                <dir>only_numbers</dir>
            </path>
            <comment>sanitize : check if there is only numbers</comment>
            <imports>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string pattern = @"/^[0-9]*$/";
                    Regex r = new Regex(pattern);
                    Match m = r.Match(text);
                    if(!m.Success){
                        $tainted = "";
                    }
                </code>
            </codes>
            <constraints>
                <constraint flawType = "CWE_89_Injection" type = "int" field = ""/>
                <constraint flawType = "CWE_91_Injection" type = "int" field = ""/>
                <constraint flawType = "CWE_90_Injection" type = "int" field = ""/>
                <constraint flawType = "CWE_78_Injection" type = "int" field = ""/>
                <constraint flawType = "CWE_95_Injection" type = "int" field = ""/>
                <constraint flawType = "CWE_98_Injection" type = "int" field = ""/>
                <constraint flawType = "CWE_601_URF" type = "int" field = ""/>
            </constraints>
            <safeties>
                <safety flawType = "CWE_89_Injection" safe = "1" needQuote = "0" />
                <safety flawType = "CWE_91_Injection" safe = "1" needQuote = "0" />
                <safety flawType = "CWE_90_Injection" safe = "1" needQuote = "0" />
                <safety flawType = "CWE_78_Injection" safe = "1" needQuote = "0" />
                <safety flawType = "CWE_95_Injection" safe = "1" needQuote = "0" />
                <safety flawType = "CWE_98_Injection" safe = "1" needQuote = "0" />
                <safety flawType = "CWE_601_URF" safe = "1" needQuote = "0" urlSafe = "0"/>
            </safeties>
        </sample>

        <sample>
            <flaws>
            <flaw>CWE_22_URF</flaw>
            </flaws>
            <path>
                <dir>path</dir>
            </path>
            <comment>sanitize : remove all invalid filenames and chars in paths</comment>
            <imports>
                <import>System.IO</import>
            </imports>
            <codes>
                <code>
                    string regexSearch = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());
                    Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                    tainted = r.Replace(tainted, "");
                </code>
            </codes>
            <constraints>
                <constraint flawType = "CWE_22_URF" type = "String" field = ""/>
            </constraints>
            <safeties>
                <safety flawType = "CWE_22_URF" safe = "1" needQuote = "0" />
            </safeties>
        </sample>


            <sample>
                <flaws>
                    <flaw>CWE_22_URF</flaw>
                </flaws>
                <path>
                    <dir>path</dir>
                </path>
                <comment>sanitize : remove all invalid filenames in a path</comment>
                <imports>
                    <import>System.IO</import>
                </imports>
                <codes>
                    <code>
                        string regexSearch = new string(Path.GetInvalidFileNameChars());
                        Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                        tainted = r.Replace(tainted, "");
                    </code>
                </codes>
                <constraints>
                    <constraint flawType = "CWE_22_URF" type = "String" field = ""/>
                </constraints>
                <safeties>
                    <safety flawType = "CWE_22_URF" safe = "0" needQuote = "0" />
                </safeties>
            </sample>

            <sample>
                <flaws>
                    <flaw>CWE_22_URF</flaw>
                </flaws>
                <path>
                    <dir>path</dir>
                </path>
                <comment>sanitize : remove all invalid chars in a path</comment>
                <imports>
                    <import>System.IO</import>
                </imports>
                <codes>
                    <code>
                        string regexSearch = new string(Path.GetInvalidPathChars());
                        Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                        tainted = r.Replace(tainted, "");
                    </code>
                </codes>
                <constraints>
                    <constraint flawType = "CWE_22_URF" type = "String" field = ""/>
                </constraints>
                <safeties>
                    <safety flawType = "CWE_22_URF" safe = "0" needQuote = "0" />
                </safeties>
            </sample>

<!--template
  <sample>
    <flaws>
      <flaw>CWE_311_SDE</flaw>
    </flaws>
    <path>
      <dir>sha256_with_crypt_function</dir>
    </path>
    <comment>sanitize : sha256 with crypt function</comment>
    <codes>
      <code>$password = “password”;
$username = “username”;
$passeword = crypt($password, "$5$rounds=5000$usesomesillystringforsalt$");</code>
    </codes>
    <constraints>
      <constraint flawType = "CWE_311_SDE" />
    </constraints>
    <safeties>
      <safety flawType = "CWE_311_SDE" safe = "1" />
    </safeties>
  </sample>
-->

    </sanitize>
