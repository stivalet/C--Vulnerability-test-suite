<?xml version = "1.0"?>
    <sanitize>
        <sample>
            <path>
                <dir>func_preg_match</dir>
                <dir>only_numbers</dir>
            </path>
            <comment>sanitize : check if there is only numbers</comment>
            <flaws>
                <flaw flaw_type="CWE_89" safe="1" need_quote="0"/>
                <flaw flaw_type="CWE_91" safe="1" need_quote="0"/>
                <flaw flaw_type="CWE_90" safe="1" need_quote="0"/>
                <flaw flaw_type="CWE_78" safe="1" need_quote="0"/>
                <flaw flaw_type="CWE_95" safe="1" need_quote="0"/>
                <flaw flaw_type="CWE_98" safe="1" need_quote="0"/>
                <flaw flaw_type="CWE_601" safe="1" need_quote="0"/>
            </flaws>
            <imports>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <codes>
                <code>
                    string pattern = @"/^[0-9]*$/";
                    Regex r = new Regex(pattern);
                    Match m = r.Match(text);
                    $re = "/^[0-9]*$/";
                    if(!m.Success){
                        $tainted = "";
                    }
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>path</dir>
            </path>
            <comment>sanitize : remove all invalid filenames and chars in paths</comment>
            <flaws>
                <flaw flaw_type="CWE_22" safe="1" need_quote="0"/>
            </flaws>
            <imports>
                <import>System.IO</import>
            </imports>
            <codes>
                <code>
                    string regexSearch = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());
                    Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                    tainted = r.Replace(tainted, "");
                </code>
            </codes>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>


            <sample>
                <flaws>
                    <flaw>CWE_22_URF</flaw>
                </flaws>
                <path>
                    <dir>path</dir>
                </path>
                <comment>sanitize : remove all invalid filenames in a path</comment>
                <imports>
                    <import>System.IO</import>
                </imports>
                <codes>
                    <code>
                        string regexSearch = new string(Path.GetInvalidFileNameChars());
                        Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                        tainted = r.Replace(tainted, "");
                    </code>
                </codes>
                <input_type>string</input_type>
                <output_type>string</output_type>
            </sample>

            <sample>
                <path>
                    <dir>path</dir>
                </path>
                <comment>sanitize : remove all invalid chars in a path</comment>
                <flaws>
                    <flaw flaw_type="CWE_22" safe="0" need_quote="0"/>
                </flaws>
                <imports>
                    <import>System.IO</import>
                </imports>
                <codes>
                    <code>
                        string regexSearch = new string(Path.GetInvalidPathChars());
                        Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                        tainted = r.Replace(tainted, "");
                    </code>
                </codes>
                <input_type>string</input_type>
                <output_type>string</output_type>
            </sample>
    </sanitize>
