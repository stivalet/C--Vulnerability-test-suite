<?xml version = "1.0"?>
<root>
    <conditions>
        <condition>
            <code>1==1</code>
            <value>True</value>
        </condition>

        <condition>
            <code>1==0</code>
            <value>False</value>
        </condition>
        <!-- TODO add other conditions-->
    </conditions>

    <complexities>
        <!-- Conditional branching -->
        <!-- if statements-->
        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {{placeholder}}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {{placeholder}}
                }else{
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {}
                }else{
                    {{placeholder}}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {{placeholder}}
                }else if(!{{condition}}){
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {}
                }else if(!{{condition}}){
                    {{placeholder}}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {{placeholder}}
                }else if(!{{condition}}){
                    {}
                }else{
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {}
                }else if(!{{condition}}){
                    {{placeholder}}
                }else{
                    {}
                }
            </code>
        </complexity>

        <complexity type="if" group="conditionals">
            <code>
                if({{condition}}){
                    {}
                }else if(!{{condition}}){
                    {}
                }else{
                    {{placeholder}}
                }
            </code>
        </complexity>

        <!-- Switch cases  -->
        <complexity type="switch" group="conditionals">
            <code>
                switch({{condition}}){

                    case({{condition}}):
                        {{placeholder}}
                        break;

                    default:
                        break;
                }
            </code>
        </complexity>

        <!-- Ternary operators -->
        <complexity type="ternary" group="conditionals">
            <code>{{condition}} ? {{placeholder}} : {}</code>
        </complexity>

        <complexity type="ternary" group="conditionals">
            <code>{{condition}} ? {} : {{placeholder}}</code>
        </complexity>

        <!--Conditional and unconditional loops -->
        <complexity type="while" group="loops">
            <code>
                while({{condition}}){
                    {{placeholder}}
                }
            </code>
        </complexity>

        <complexity type="while" group="loops">
            <code>
                do{
                    {{placeholder}}
                }while({{condition}});
            </code>
        </complexity>

        <complexity type="for" group="loops">
            <code>
                for(int i = 0; i &lt;= 10; i++){
                    {{placeholder}}
                }
            </code>
        </complexity>

        <complexity type="foreach" group="loops">
            <code>
                string[] arr = new string[4]; // declaring array

                //Storing value in array element
                arr[0] = null;
                arr[1] = null;
                arr[2] = null;
                arr[3] = tainted;

                foreach(string val in arr){
                    {{tainted}} = val;
                    {{placeholder}}
                }
            </code>
        </complexity>

        <!-- Unconditional jumps -->
        <complexity type="goto" group="jumps">
            <code>
                goto Skip;
                {{placeholder}}
                Skip:
                {}
            </code>
        </complexity>

        <complexity type="goto" group="jumps">
            <code>
                goto Skip;
                Skip:
                {{placeholder}}
            </code>
        </complexity>

        <!-- Functions -->
        <complexity type="function" group="functions">
            <call>{{function_name}}({{args_call}})</call>
            <code>
                {{visibility}} {{return_type}} {{function_name}}({{args_def}}){
                    {{placeholder}}
                }
            </code>
        </complexity>

        <!-- Classes -->
        <complexity type="function" group="functions">
            <code>
                class {{className}}{

                    {{classAttributes}}

                    public {{className}}(){} //constructor

                    {{functions}}
                }
            </code>
        </complexity>
    </complexities>
</root>
